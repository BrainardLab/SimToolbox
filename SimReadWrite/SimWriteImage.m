function SimWriteImage(outputFile,theImage)% SimWriteImage(outputFile,theImage)%% Writes the file specified by outputFile to disk.%% Need to handle case where camera/monitor is a struct better,% both here and also on read.%% 6/15/98   pxl  Wrote it.% 7/1/98    pxl  Changed it to take an SimImage structure as input.% 7/6/98    dhb  Tidying up.% 7/10/98   dhb	 Don't write camera/monitor if we get passed a struct.% 2/24/99   dhb  Rewrite to match read routines.% 3/21/04   dhb, bx Allow write of camera structure at end.% 5/17/04   dhb  Explicit extension of .mat for mat file type.% 6/15/04   dhb, bx Change variable 'image' to 'theImage' to  work with%                MATLAB7% 9/6/04    dhb  Delete spurious \n in usage error message.% Copyright (c) 1999 David Brainard and Philippe Longere.   All rights reserved.% Argument checkif (nargin ~= 2)	  error('Usage: SimWriteImage(outputFile,theImage)');end% Open the file.file = fopen(outputFile,'w');if (file == -1)  error(sprintf('WriteImage: File %s cannot be opened\n',outputFile));end% Add a little commentfprintf(file,'# File written by SimWriteImage\n\n');% Field rawImageDir field is computed on read, not stored in file.% So we just remove it from the structure if it is there.  It should% only show up for hyperspectral images, but it doesn't hurt to% take it out for all types.if (isfield(theImage,'rawImageDir'))  theImage = rmfield(theImage,'rawImageDir');end% Field theImage.nPlanes is generated on write% and discarded on read.if (isfield(theImage,'images'))  theImage.nPlanes = size(theImage.images,3);end% Write theImage type, as this must come first.% Cache type for later use and remove from% structure.if (~isfield(theImage,'imageType'))  error('Passed image does not contain type field');endSimWriteCustomField(file,'imageType',theImage.imageType);imageType = theImage.imageType;theImage = rmfield(theImage,'imageType');% Mandatory comment field must go last, so% we put it there.if (~isfield(theImage,'comments'))  error('Passed image does not contain comment field');endtemp = theImage.comments;theImage = rmfield(theImage,'comments');theImage.comments = temp;switch (imageType) case 'hyperspectral',      % Some checks      if (isfield(theImage,'images'))        error('Hyperspectral images should not have image data in structure');      end      	      % Snag camera and monitor data in      % case they are structures.      camera = theImage.cameraFile;      if (isstruct(theImage.cameraFile))        theImage.cameraFile = 'struct';      end            % Write out the fields      fields = fieldnames(theImage);      for i = 1:length(fields)        eval(['SimWriteCustomField(file,fields{i},theImage.' fields{i} ');']);      end	      % Write the raw data files for new hyperspectral image?      % This is an interesting question.  Mostly this routine      % will be used to write a header file for hyperspectral      % images, not to write the data.            % Tag the camera structure onto the end, if it      % is passed as a struct.      if (isstruct(camera))        fprintf(file,'\n# Camera description for image above\n\n');        SimWriteCamera(file,camera);      end	 case {'sensor','monitor'},      % Save out the image data      images = theImage.images;      theImage = rmfield(theImage,'images');	      % Snag camera and monitor data in      % case they are structures.      camera = theImage.cameraFile;      if (isstruct(theImage.cameraFile))        theImage.cameraFile = 'struct';      end      if (strcmp(imageType,'monitor'))        monitor = theImage.monitorFile;        if (isstruct(theImage.monitorFile))          theImage.monitorFile = 'struct';        end      end            % Write out the fields      fields = fieldnames(theImage);      for i = 1:length(fields)        eval(['SimWriteCustomField(file,fields{i},theImage.' fields{i} ');']);      end	      % Write the image data.      switch (theImage.imageFormat)       case 'tiff',        if (theImage.bits > 8)	          error('Can only use TIFF format for 8-bit (or fewer) images');        end        if (theImage.nPlanes ~= 3)          error('Can only use TIFF format for 3 plane images');        end        imwrite(images/255,[outputFile(1:end-5) '.tif'],'tif','compression','none');       case 'int16',        if (theImage.bits > 15)          error('Can only use int16 format for 15-bit (or fewer) images');        end        for i = 1:theImage.nPlanes          SimWriteRawImage([outputFile(1:end-5) '.' num2str(i)],images(:,:,i),'int16');        end       case 'int32',        if (theImage.bits > 31)          error('Can only use int32 format for 31-bit (or fewer) images');        end        for i = 1:theImage.nPlanes          SimWriteRawImage([outputFile(1:end-5) '.' num2str(i)],images(:,:,i),'int32');        end       case 'mat',            eval(['save(''' outputFile(1:end-5) '.mat'',''images'');']);       otherwise,        error('Unknown image format requested on write');      end	      % Tag the camera structure onto the end, if it      % is passed as a struct.      if (isstruct(camera))        fprintf(file,'\n# Camera description for image above\n\n');        SimWriteCamera(file,camera);      end	      % Tag the monitor structure onto the end, if it      % is passed as a struct.      if (strcmp(imageType,'monitor'))        if (isstruct(monitor))          fprintf(file,'\n# Monitor description for image above\n\n');          SimWriteMonitor(file,monitor);        end      end otherwise,  fclose(file);  error(sprintf('%s has an invalid image type: %s.\n',outputFile,type));end% Close the filefclose(file);return