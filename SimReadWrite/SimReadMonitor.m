function [monitor] = SimReadMonitor(fileName)% [monitor] = SimReadMonitor(fileName)%% Reads a monitor description from the file and fill in the structure.% And fills some gaps for PsychoToolbox use ...%% Passed filename can be a file handle, to allow reading of% monitor information from inside image file.%% This code should be patched up when we fix up gamma fitting% code in the Psychophysics Toolbox.%% 6/10/98  pxl  Wrote it.% 7/6/98   dhb  Minor tidying. % 10/29/98 dhb  Replace isEqualN by strncmp.% 11/04/98 pxl  Changed it to new (more general) monitor type.% 1/13/99  dhb  Changed to be closer to image, camera readers.% 1/19/99  dhb  Allow passed arg to be a file handle.%          dhb  Eliminate previously required header.% 3/1/99   dhb  Fix gamma splining to eliminate NaN from ends.% 2/10/07  dhb  No gamma splining. This should be done on inport of monitor% data.% Copyright (c) 1999 David Brainard and Philippe Longere.   All rights reserved.% Argument checkif (nargin < 1)	  error('SimReadMonitor: requires a filename');end% Open the fileif (isstr(fileName))file = fopen(fileName,'r');	if (isequal(file,-1))		   error(sprintf('SimReadMonitor: file %s not found.\n',fileName));	endelse	file = fileName;end% Monitor file is sensible, everything is stored as custom data.monitor = SimReadCustom(file,[]);% Close the fileif (isstr(fileName))	fclose(file);end% Check that we got all mandatory fields.listOfRequired = strvcat('manufacturer','name','nDevices','wavelengthSampling','emissionSpectra','height','width');missing = SimCheckRequiredFields(monitor,listOfRequired);if (~isempty(missing))	error(sprintf('ReadMonitor: a mandatory field (%s) is not present',missing));end% Data for the psychoToolbox to work, these are% just different names.  Probably we should settle% on a single naming convention.start = monitor.wavelengthSampling.start;step = monitor.wavelengthSampling.step;numberSamples = monitor.wavelengthSampling.numberSamples;monitor.P_device = monitor.emissionSpectra;monitor = rmfield(monitor,'emissionSpectra');monitor.S_device = [start step numberSamples];monitor.T_device = eye(numberSamples);monitor.T_ambient = monitor.T_device;% These are the ambient illumination measurement% If they don't exist, let's assume they are zero.if (~isfield(monitor,'ambientSpectrum'))  monitor.P_ambient = zeros(numberSamples,1);  monitor.S_ambient = monitor.S_device;else	monitor.P_ambient = monitor.ambientSpectrum;	monitor.S_ambient = monitor.S_device;	if (length(monitor.P_ambient) ~= monitor.S_device(3))		error('Size mismatch between phosphor and ambient spectra');	end	monitor = rmfield(monitor,'ambientSpectrum');end