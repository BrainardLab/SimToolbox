function SimWriteCamera(fileName,camera)% SimWriteCamera(fileName,camera)%% Write the camera file from the structure% even if it contains unknown fields.%% 10/14/98	pxl	 Wrote it.% 10/29/98  dhb  Added some comments.% 2/26/99   dhb  Rewrite for new file formats.% Copyright (c) 1999 David Brainard and Philippe Longere.   All rights reserved.% Argument checkif (nargin ~= 2)	  error('Usage: SimWriteCamera(fileName,camera)');end% We don't write the number of algorithms explicitly.% This is generated on readif (isfield(camera,'numberAlgorithms'))  camera = rmfield(camera,'numberAlgorithms');end% Reshape mosaic specification.  This code depends on knowing% the scan order of MATLAB matrices and also the order in which% strings are scanned by our reader/writer.  You probably don't want% to know, unless your mosaic is showing up wrong when you% go to use it.  In this case, here would be a good place to% look for an error.  See also matched code in the reader.if (camera.numberSensors > 1)	if (~isfield(camera,'spatialLayout'))		error('WriteCamera: no spatial layout information present');	end	dims = camera.spatialLayout.dims;	temp = [];	for i1 = 1:dims(3)		temp(:,:,i1) = camera.spatialLayout.mosaic(:,:,i1)';	end	camera.spatialLayout.mosaic = temp;	camera.spatialLayout.mosaic = reshape(camera.spatialLayout.mosaic,dims(2),dims(1),dims(3));end% Mandatory comment field must go last, so% we put it there.if (~isfield(camera,'comments'))	error('Passed camera does not contain comment field');endtemp = camera.comments;camera = rmfield(camera,'comments');camera.comments = temp;% Open the fileif (isstr(fileName))	file = fopen(fileName,'w');	if (isequal(file,-1))		   error(sprintf('SimWriteCamera: file %s not found.',fileName));	endelse	file = fileName;end% Write out the fieldsfields = fieldnames(camera);for i = 1:length(fields)	eval(['SimWriteCustomField(file,fields{i},camera.' fields{i} ');']);end% Close fileif (isstr(fileName))	fclose(file);end