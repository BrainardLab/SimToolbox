function [outputImage] = SimTIFFToImage(inputImageFile,cameraFile,...	cameraDistance,exposureTime,fStop)% [outputImage] = SimTIFFToImage(inputImage,cameraFile,...%		cameraDistance,exposureTime,fStop)%% Converts a monochrome mosaiced TIFF file to % simulator format.  Takes the TIFF filename% and a camera description file.%% If the TIFF file contains a single plane, it is% assumed to correspond to the camera mosaic.% If it has three planes and the camera has three% sensors, it is assumed that the image has been% demosaiced, but we'll just pick out the true% sensor locations.%% 09/23/98  pxl  Wrote it% 10/30/98  dhb  Added some comments.% 10/31/98  pxl  Some more comments.% 3/2/99    dhb  Rewrote just to take TIFF input.% 3/31/99   dhb  Add printout.% 6/26/02   dhb  Add output units. I hope 'Disk' is the right choice.% Copyright (c) 1999 David Brainard and Philippe Longere.   All rights reserved.% Basic initializationoutputImage.imageType = 'sensor';outputImage.bits = '8';outputImage.comments = 'Created from TIFF file';outputImage.cameraFile = cameraFile;outputImage.cameraDistance = cameraDistance;outputImage.exposureTime = exposureTime;outputImage.fStop = fStop;outputImage.unit = 'Disk';% Read the image and set the dimensions%info = imfinfo(inputImageFile,'tif')mosaicedImage = double(imread(inputImageFile,'tif'));[outputImage.height,outputImage.width] = size(mosaicedImage);% Read the camera filecamera = SimReadCamera(outputImage.cameraFile);% Put read image in correct form to maskif (size(mosaicedImage,3) == 1)	for n = 1:camera.numberSensors		outputImage.images(:,:,n) = mosaicedImage;	endelseif (size(mosaiceImage,3) == 3)	if (camera.numberSensors ~= 3)		error('TIFF file contains 3 planes, but camera does not have 3 sensor types');	else		outputImage.images = mosaicedImage;	endelse	error('TIFF file contains an image with a strange number of planes');end% Create the mask according to the mosaic pattern mask = SimCreateMask(camera,outputImage.height,outputImage.width);% Apply the maskoutputImage.images = outputImage.images .* mask;outputImage.mosaiced = 1;% Gather statistics on the imagefor i1 = 1:camera.numberSensors	temp = outputImage.images(:,:,i1);	maxval = max(temp(:));	minval = min(temp(:));	meanval = mean(temp(:));	medval = median(temp(:));	fprintf('SimTIFFToImage: plane %g, max: %g, mean: %g, median: %g, min: %g\n',...		i1,maxval,meanval,medval,minval);end