function areEqual = SimEqualMonitor(monitor1,monitor2)% areEqual = SimEqualMonitor(monitor1,monitor2)%% Are two monitor structs equal?%% Differs from builtin function isequal in% that it ignores small precision errors in% certain data and doesn't care about order% of fields in struct.%% 3/1/99  dhb  Wrote it.% Copyright (c) 1999 David Brainard and Philippe Longere.   All rights reserved.areEqual = 1;% If there is an P_device field,% only compare to a tolerancetol = 1e-8;if (isfield(monitor1,'P_device'))	check1 = monitor1.P_device;	check2 = monitor2.P_device;	if (max(abs(check1(:)-check2(:))) > tol)		areEqual = 0;		return	end	monitor1 = rmfield(monitor1,'P_device');	monitor2 = rmfield(monitor2,'P_device');end% If there is an gammaTable field,% only compare to a tolerancetol = 1e-5;if (isfield(monitor1,'gammaTable'))	check1 = monitor1.gammaTable;	check2 = monitor2.gammaTable;	if (max(abs(check1(:)-check2(:))) > tol)		areEqual = 0;		return	end	monitor1 = rmfield(monitor1,'gammaTable');	monitor2 = rmfield(monitor2,'gammaTable');end% If there is an rawGammaTable field,% only compare to a tolerancetol = 1e-5;if (isfield(monitor1,'rawGammaTable'))	check1 = monitor1.rawGammaTable;	check2 = monitor2.rawGammaTable;	if (max(abs(check1(:)-check2(:))) > tol)		areEqual = 0;		return	end	monitor1 = rmfield(monitor1,'rawGammaTable');	monitor2 = rmfield(monitor2,'rawGammaTable');end% Compare remaining fields, but don't care% about order.names1 = sort(fieldnames(monitor1));names2 = sort(fieldnames(monitor2));if (length(names1) ~= length(names2))	areEqual = 0;	return;endfor i = 1:length(names1)	if (eval(['~isequal(monitor1.' names1{i} ',monitor2.' names2{i} ')']))		areEqual = 0;		return;	endend