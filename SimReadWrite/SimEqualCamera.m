function areEqual = SimEqualCamera(camera1,camera2)% areEqual = SimEqualCamera(camera1,camera2)%% Are two camera structs equal?%% Differs from builtin function isequal in% that it ignores small precision errors in% certain data and doesn't care about order% of fields in struct.%% 3/1/99  dhb  Wrote it.% Copyright (c) 1999 David Brainard and Philippe Longere.   All rights reserved.areEqual = 1;% If there is an spectralSensitivity field,% only compare to a tolerancetol = 1e-8;if (isfield(camera1,'spectralSensitivity'))	check1 = camera1.spectralSensitivity;	check2 = camera2.spectralSensitivity;	if (max(abs(check1(:)-check2(:))) > tol)		areEqual = 0;		return	end	camera1 = rmfield(camera1,'spectralSensitivity');	camera2 = rmfield(camera2,'spectralSensitivity');end% Compare remaining fields, but don't care% about order.names1 = sort(fieldnames(camera1));names2 = sort(fieldnames(camera2));if (length(names1) ~= length(names2))	areEqual = 0;	return;endfor i = 1:length(names1)	if (eval(['~isequal(camera1.' names1{i} ',camera2.' names2{i} ')']))		areEqual = 0;		return;	endend