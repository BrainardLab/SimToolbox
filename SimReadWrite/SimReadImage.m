function [image] = SimReadImage(inputFile)% [image] = SimReadImage(inputFile)%% Reads, and fill the image structure in the file.% See the image file format documentation.% % 6/30/98  pxl  Wrote it.% 7/6/98   dhb  Minor tidying.% 10/28/98 dhb  Replace isEqualN by strncmp.% 1/13/99  dhb  Rewrite custom field stuff to match new ReadCamera.% 1/14/99  dhb  For consistency with other routines, changed leading string.% 1/18/99  dhb  Get image path out of input file.  Need to fix for other%               image types.% 1/18/99  dhb  Get rid of image history, make everything a custom field.% 4/6/99   dhb  Get rid of mandatory exposure time for hyperspectral image%          dhb  Only check for camera file at end if field is present.% 4/30/99  dhb  Small fix specified by pxl to get it to work on UNIX.% 5/4/99   dhb  Set hyperspectral power units to 'disk' on read.% 8/13/03  dhb  Handle case where .mat file loaded contains a variable with%               name other than images, which is the default.% 3/21/04  dhb, bx Allow struct for cameraFile in hyperspectral read.% 5/17/04  dhb  Explicit .mat extension used during read of mat file type.% Argument checkif (nargin < 1)	  error('SimReadImage: requires a filename.\n');end% Open file and format checkfile = fopen(inputFile,'r');if (isequal(file,-1))	  error(sprintf('SimReadImage: file %s not found.\n',inputFile));endimage = [];image.rawImageDir = '';% Read image type[image,buf] = SimReadCustomField(file,image);if (~isfield(image,'imageType'))	error('ReadImage: must define image type as first image field\n');endswitch (image.imageType)  % Hyperspectral.  Get all information but don't actually read the  % data.  This is because the hyperspectral images can be so  % big that we need to spool them in one at a time.  case 'hyperspectral',		        % Read image as custom fields.	    image = SimReadCustom(file,image,buf);			% Check that we got all mandatory fields.		listOfRequired = strvcat('cameraFile',...			'height','width','wavelengthSampling','imageRoot','imageFactors',...			'inputCameraDistance');		missing = SimCheckRequiredFields(image,listOfRequired);		if (~isempty(missing))			error(sprintf('ReadImage: a mandatory field (%s) is not present',missing));		end				% Convert empty root to string and define path		% to folder containing image, based on passed name.		if (isempty(image.imageRoot))			image.imageRoot = '';		end		image.rawImageDir = SimGetImagePath(inputFile);		image.unit = 'Disk';                % Read camera structure off end if it is there.		if (isfield(image,'cameraFile'))			if (strcmp(image.cameraFile,'struct'))				image.cameraFile = SimReadCamera(file);			end		end  case {'sensor','monitor'},    % Read image as custom fields.    image = SimReadCustom(file,image,buf);	% Get image data	switch (image.imageFormat)		case 'tiff',			if (image.bits > 8)					error('Can only use TIFF format for 8-bit (or fewer) images');			end			if (image.nPlanes ~= 3)				error('Can only use TIFF format for 3 plane images');			end		 	image.images = double(imread([inputFile(1:end-5) '.tif'],'tif'));		case 'int16',			if (image.bits > 15)				error('Can only use int16 fromat for 15-bit (or fewer) images');			end			image.images = zeros(image.height,image.width,image.nPlanes);			for i = 1:image.nPlanes				image.images(:,:,i) = ...					SimReadRawImage([inputFile(1:end-5) '.' num2str(i)],...						image.height,image.width,'int16');			end			case 'int32',			if (image.bits > 31)				error('Can only use int16 fromat for 31-bit (or fewer) images');			end			image.images = zeros(image.height,image.width,image.nPlanes);			for i = 1:image.nPlanes				image.images(:,:,i) = ...					SimReadRawImage([inputFile(1:end-5) '.' num2str(i)],...						image.height,image.width,'int32');			end			case 'mat',			eval(['varsInFile = load(''' inputFile(1:end-5) '.mat'');']);            if (isfield(varsInFile,'images'))			    image.images = getfield(varsInFile,'images'); clear varsInFile            else                varNames = fieldnames(varsInFile);                image.images = getfield(varsInFile,varNames{1}); clear varsInFile varNames            end	end	% Remove imagePlanes field	image = rmfield(image,'nPlanes');	% Read camera structure off end if it is there.	if (isfield(image,'cameraFile'))		if (strcmp(image.cameraFile,'struct'))			image.cameraFile = SimReadCamera(file);		end	end		% Read monitor structure off end if it is there	if (strcmp(image.imageType,'monitor'))		if (strcmp(image.monitorFile,'struct'))			image.monitorFile = SimReadMonitor(file);		end	end  otherwise    fclose(file);    error(sprintf('%s has an invalid image type: %s.\n',inputFile,image.imageType));end% Close the filefclose(file);