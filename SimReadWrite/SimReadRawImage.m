function [x] = SimReadRawImage(filename, height, width, type, originalPlatform,offset)% x = SimReadRawImage(filename, height, width, [type], [originalPlatform],[offset])%% Read a RAW DATA format image written by IPLAB.% The raw image data is written as a series of signed% short integers in row first order.%% The type parameter defines the data that are stored in the % binary file, the default is 'int16' (short int), you can% other binary filetypes as understood by fread.%% The originalPlatform parameter defines the data that are stored in the % binary file, the default is big-endian byte ordering% You can specify 0 for big-endian or 1 for little-endian%% The offset parameter allows to skip some file header (given in number% of words of "type" length%  % You can change the condition for the use of the mex file% which speeds up (by a factor of 10) the reading of big files.%% 2/24/97   jdt Wrote it% 8/20/98   pxl Added mex call% 12/10/98  pxl Commented, and take type into account.% 1/13/99   dhb Cosmetic editing.% 3/2/99    dhb Default is int16, not uint16.% 01/25/00  pxl Added support for intel files.% 01/26/00  pxl Added offset parameter.% Copyright (c) 1999 David Brainard and Philippe Longere.   All rights reserved.if ((nargin<4)|(isempty(type)))  type = 'int16';endif ((nargin<5)|(isempty(originalPlatform)))  originalPlatform=0;endif ((nargin<6)|(isempty(offset)))  offset = 0;end% If the mex file has been compiled, use it. whichMachine = computer;if ((exist('SimFastReadRawImage')==3))   % Call the mex function   % prod((computer=='PCWIN')|(computer=='LNX86'))==1 if Intel Processor,   % and we compare this with the order given in parameter   x = double(SimFastReadRawImage(filename,width,height,type,xor(prod((computer=='PCWIN')|(computer=='LNX86')),originalPlatform),offset))';% Otherwise use MATLAB fread.else  % You can compile the SimFastReadRawImage mex-file   % if you think this is too slow  % Please have a look at SimFastReadRawImage.c  if (originalPlatform)    id = fopen(filename,'r','l');  else    id = fopen(filename,'r','b');  end  if (id == -1)    error(sprintf('Cannot open file (%s/%s).',pwd,filename));  end  if (offset~=0)    [x, count] = fread(id, offset, type);    clear x;    if (count~=offset)      error(sprintf('Read error for file (%s/%s).',pwd,filename));    end  end  [x, count] = fread(id, [width,height],type);  x = x';  if (count ~= width*height)    error(sprintf('Read error for file (%s/%s).',pwd,filename));  end  fclose(id);end