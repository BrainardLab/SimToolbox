%procedure SimCreateMonitor% SimCreateMonitor% % Interactivly create a monitor structure and stores it in a file.% emission and gamma (input, and table) data loaded in the current % workspace before running this.%% 6/15/98 pxl wrote it% 2/16/00 pxl Modified it to fit new monitor file specs.  % Copyright (c) 1999 David Brainard and Philippe Longere.   All rights reserved.% Check argumentsfileName=input('Please give output Monitor file name: \n','s');% Open filefile = fopen(fileName,'w');if (isequal(file,-1))	  error(sprintf('CreateMonitor: cannot open file %s.\n',fileName));end% Administrative headersfprintf(file,'# SimMonitorDescriptionFile\n');fprintf(file,'# Created interactivly by SimCreateMonitor\n');fprintf(file,'# What a fancy tool, isn''t it ?\n');fprintf(file,'#  \n');fprintf(file,'#SimManufacturer\n');buf=input('Please give Monitor''s manufacturer: \n','s');fprintf(file,'%s\n',buf);fprintf(file,'#SimEnd\n');fprintf(file,'#SimName\n');buf=input('Please give Monitor''s name: \n','s');fprintf(file,'%s\n',buf);fprintf(file,'#SimEnd\n');% Color informationfprintf(file,'#SimNDevices\n');nbD=input('Please give Number of emitting devices: ','s');eval(['nbD = 'nbD ';']);fprintf(file,'%d\n',nbD);fprintf(file,'#SimEnd\n');fprintf(file,'##SimWavelengthSampling\n');S_name=input(['Please give Emission spectra wavelength sampling [start step number], usually' ...	 ' cal.S_device\n'],'s');eval(['S = 'S_name ';'])fprintf(file,'##SimStep\n');fprintf(file,'%d\n',S(2));fprintf(file,'##SimStart\n');fprintf(file,'%d\n',S(1));fprintf(file,'##SimNumberSamples\n');fprintf(file,'%d\n',S(3));fprintf(file,'##SimEnd\n');P_name=input('Please give Emission spectra\n','s');fprintf(file,'#Sim#EmissionSpectra\n');eval(['P = 'P_name ';'])if (size(P,1)~=S(3))  P= P';endif (size(P,1)~=S(3)|size(P,2)~=nbD)  error(sprintf('Something is wrong with your spectral data, (%d,%d)~=(%d,%d)',size(P,1),size(P,2),S(3),nbD));endfprintf(file,'%d %d\n',S(3),nbD);for (k=1:S(3))  fprintf(file,'%d ',P(k,:));  fprintf(file,'\n');end%buf='#SimUnit';%fprintf(file,'%s\n',buf);%buf=input('Units (cd/m2,W): ','s');%fprintf(file,'%s\n',buf);resolution=input('Please give Number of pixels (row column)\n','s');resolution = str2num(resolution);fprintf(file,'# Define number of pixels\n');fprintf(file,'#SimHeight\n');fprintf(file,'%d\n',resolution(1));fprintf(file,'#SimEnd\n');fprintf(file,'#SimWidth\n');fprintf(file,'%d\n',resolution(2));fprintf(file,'#SimEnd\n');fprintf(file,['# Provide information about monitor gamma.  We give the input values\n' ...	      '# and the corresponding measurements of output level, normalized to a max of 1.\n']);G_name=input('Please give Gamma Input Table\n','s');eval(['G= 'G_name ';'])fprintf(file,'#Sim#RawGammaInput\n');fprintf(file,'%d %d\n',size(G,1),size(G,2));for (k=1:size(G,2))  fprintf(file,'%d ',G(:,k));  fprintf(file,'\n');endfprintf(file,'\n');G_name=input('Please give Gamma Table\n','s');eval(['G= 'G_name ';'])fprintf(file,'#Sim#RawGammaTable\n');fprintf(file,'%d %d\n',size(G,1),size(G,2));for (k=1:size(G,2))  fprintf(file,'%d ',G(:,k));  fprintf(file,'\n');endfprintf(file,'\n');% Commentsfprintf(file,'#SimComments\n');buf = input('Please give Any comment:  \n','s');fprintf(file,'%s\n',buf);fprintf(file,'#SimEndComments');% Close filefclose(file);