function spectra = SimGetRawHyperSpectra(inFileDir,width,height,xyLocs,blockSize)% SimGetRawHyperSpectra(inFileDir,width,height,xyLocs,blockSize)%% Read a hyperspectral image and extract the spectra at specified xyLocations.% Data are averaged over a block size of blockSize pixels, centered on xyLocs.%% xyLocs should be a nLocs by 2 matrix with x values in the first row and y in% the second.% % 12/17/98  dhb  Wrote it.  % Check args and set defaultsif (nargin < 5)  error('Usage: SimGetHyperspectralSpectra(inFileDir,width,height,xyLocs,blockSize)');end% Get machine dependent path separatorif (isequal(computer,'PCWIN'))  pathSeparator='\';elseif (isequal(computer,'MAC2'))  pathSeparator=':';else  pathSeparator='/';end% Get number of locationsnLocs = size(xyLocs,1);spectra = zeros(31,nLocs); % Load imageFactorsload(sprintf('%s%simageFactors',inFileDir,pathSeparator));% Chunk individual images extract spectraspectralIndex = 1;for k = 400:10:700  inFile = sprintf('%s%s%i',inFileDir,pathSeparator,k);  fprintf('Reading %s\n',inFile);  theImage = SimReadRawImage(inFile,height,width);  % Uncomment this to see one of the images.  % if (k == 400)  %   figure(1); clf;  %   imshow(Scale(theImage));  % end  % Loop through and pull out the desired spectra.  for j = 1:nLocs    xLoc = xyLocs(j,1); yLoc = xyLocs(j,2);    block = theImage(yLoc-blockSize/2:yLoc+blockSize/2, ...      xLoc-blockSize/2:xLoc+blockSize/2);    spectra(spectralIndex,j) = mean(block(:))*imageFactors(spectralIndex);  end  spectralIndex = spectralIndex+1;end