function [mask] = SimCreateMask(camera,height,width)% [mask] = SimCreateMask(camera,height,width)%% Creates a mask for mosaicing purpose according to % mosaic pattern of the given camera, using the % given sizes.%% 10/31/98  pxl  Wrote it.% 1/4/99    dhb  Replace fix by ceil.  This is probably not necesssary%                but I was chasing a bug and it can't hurt.% Copyright (c) 1998, 1999 David Brainard & Philippe Longere. All rights reserved.% First create a small kernel representing the RGB mosaic patternkernals = zeros(camera.spatialLayout.dims(1),camera.spatialLayout.dims(2),camera.numberSensors);for k = 1:camera.spatialLayout.dims(3)  for l = 1:camera.spatialLayout.dims(1)    for m = 1:camera.spatialLayout.dims(2)      kernals(l,m,camera.spatialLayout.mosaic(l,m,k)) = 1;    end  endend  % Then repeat the kernal to build a mask to the size % of the imagefor n = 1:camera.numberSensors  mask(:,:,n) = repmat(kernals(:,:,n),...  ceil(height./camera.spatialLayout.dims(1))+1,ceil(width/camera.spatialLayout.dims(2))+1);end[checkHeight,checkWidth] = size(mask);if (checkHeight < height | checkWidth < width)	error('Logic error in computation of mask size');endmask = mask(1:height,1:width,:);