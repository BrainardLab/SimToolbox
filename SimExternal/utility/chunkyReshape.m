function result = chunkyReshape(orig, newsize, chunksize)% result = chunkyReshape(orig, newsize, chunksize)%% Reshape a matrix into newsize.% This is different from the reshape command in that chunks of% size=chunksize are kept together in the reshaping.%% newsize specifies the new matrix size. It should be a two-vector%     in the form of [rowsize, colsize]. If only 1 number is given,%     use rowsize=colsize.% chunksize is specified as similarly. It defaults to [1 1] -- this%      will give the same result as "reshape".%% Xuemei Zhang 6/18/96% Last Modifiedif (nargin<2)  chunksize = [1 1];endif (length(chunksize)==1)  chunksize = [chunksize chunksize];endif (length(newsize)==1)  newsize = [newsize newsize];endif (prod(chunksize)>1 | prod(chunksize)==prod(size(orig)))  r = rem(newsize, chunksize);  if (any(r))    error(['New size is not integer multiple of chunksize.']);  end  r = rem(size(orig), chunksize);  if (any(r))    error(['Original matrix size is not integer multiple of chunksize.']);  end  q = size(orig)./chunksize;  if (chunksize(2)<size(orig,2))  %% if orig is taller than chunksize    c = [1:chunksize(2):size(orig,2)]';    c = c*ones(1,chunksize(2)) + ones(q(2),1)*([1:chunksize(2)]-1);    c = reshape(c, size(orig,2), 1);    orig = reshape(orig(:, c), q(2)*size(orig,1), chunksize(2));  end  step = size(orig, 1)/newsize(1);  orig = reshape(orig, newsize(1), newsize(2));  c = [1:step:newsize(2)]';  c = c*ones(1,step) + ones(size(c))*([1:step]-1);  c = reshape(c, newsize(2), 1);    result = orig(:, c);else  result = reshape(orig, newsize(1), newsize(2));end