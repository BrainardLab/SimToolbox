function checkImage = HypWriteSimg(cameraFile,outputName,rawImageDir,rawImageRoot,width,height,cameraDistance,originalPlatform,type)% checkImage = HypWriteSimg(cameraFile,outputName,rawImageDir,rawImageRoot,width,height,cameraDistance,[originalPlatform],type)%% Create an simulator file from hyperspectral data.%% This routine computes the scale factors from the files% Means.mat and refSpectra.mat, which must be in rawImageDir.%% If originalPlatform is absent, Motorola (=0) is assumed  %% 6/12/98   pxl  Wrote it.% 7/6/98    dhb  Tidying up.% 12/17/98  dhb  Tidy, add comments.%           dhb  Validate computation of imageFactors.% 12/29/98  dhb  Small changes.% 01/26/00  pxl  Added support for original Intel platform  % Copyright (c) 1999 David Brainard and Philippe Longere.   All rights reserved.  % Check argumentsif (nargin < 7)  error('Usage: SimRawHyperToImage(cameraFile,outputName,rawImageDir,rawImageRoot,width,height,cameraDistance,[originalPlatform],[type])');endif (nargin > 7) outputImage.originalPlatform =originalPlatform;endif (nargin > 8) outputImage.type = type;end% Set up datacamera = SimReadCamera(cameraFile);exposureTime = 1;% Change to correct directoryprevDir = pwd;if (~isempty(rawImageDir))  cd(rawImageDir);else  rawImageDir = pwd;end% Load in calibration data and compute image factors.% We compare this to pre-computed imageFactors, just for grinsif (exist('imageFactors.mat') == 2)  imageFactorsDir = which('imageFactors.mat');  if (strcmp([rawImageDir 'imageFactors.mat'],imageFactorsDir))    fprintf('HypWriteSimg: Loading previously computed image factors\n');    load imageFactors    checkFactors = imageFactors;    clear imageFactors refSpectrum  endendfprintf('SimRawHyperToImage: Computing image factors\n');load([rawImageDir 'refSpectra']);load([rawImageDir 'Means']);S_images = [400 10 31];S_raw = [380 5 81];refSpectrumRaw = refSpectra(:,1);refSpectrum = SplineSpd(S_raw,refSpectra(:,1),S_images);rawMeas = means(:,1);imageFactors = zeros(S_images(3),1);for i = 1:S_images(3)  imageFactors(i) = refSpectrum(i) / rawMeas(i);  if (exist('checkFactors') == 1)    if (imageFactors(i) ~= checkFactors(i))      error(sprintf('Computed factor %g: %g, stored %g, diff: %g\n', ...		    i,imageFactors(i),checkFactors(i),abs(imageFactors(i)-checkFactors(i))));    end  endend% Create the hyperspectral imageoutputImage.imageType = 'hyperspectral';outputImage.cameraFile = cameraFile;outputImage.exposureTime = -1;outputImage.height = height;outputImage.width = width;outputImage.wavelengthSampling.start = S_images(1);outputImage.wavelengthSampling.step = S_images(2);outputImage.wavelengthSampling.numberSamples = S_images(3);outputImage.imageRoot = rawImageRoot;outputImage.imageFactors = imageFactors;outputImage.inputCameraDistance = cameraDistance;outputImage.actualIlluminant.spd = 1.12*refSpectrumRaw;outputImage.actualIlluminant.S = S_raw;outputImage.comments = 'Created by SimRawHyperToImage';% Write the file.name = [pwd '/' outputName];fprintf('SimRawHyperToImage: Writing the image (%s)\n',name);%outputImageSimWriteImage(outputName,outputImage);% Read the image to make sure we canfprintf('SimRawHyperToImage: Reading image back\n');checkImage = SimReadImage(outputName);% Return to previous directory.cd(prevDir);