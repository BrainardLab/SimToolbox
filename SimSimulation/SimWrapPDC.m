function [outputImage] = SimWrapPDC(inputImage,outputCamera)% [outputImage] = SimWrapPDC(inputImage,outputCamera)%% Wrapper function to call Peter's PDC code from within% the toolbox.%% 4/26/99  dhb, pc  Wrote it.% 5/3/99   dhb      Add spectralResolution arg to exposureControl.% Create a scene from the input image descriptionfprintf('Creating scene\n');scene.Size.Width = inputImage.width;scene.Size.Height = inputImage.height;scene.Size.Spectrum = inputImage.wavelengthSampling.numberSamples;inputS = [inputImage.wavelengthSampling.start ...      inputImage.wavelengthSampling.step ...      inputImage.wavelengthSampling.numberSamples];scene.Spectral.Wavelength = SToWls(inputS);scene.Spectral.Resolution = inputImage.wavelengthSampling.step;spatialResolution = outputCamera.pdc.spatialResolution;spectralResolution = outputCamera.pdc.spectralResolution;scene.Distance = inputImage.cameraDistance;% Read in hyperspectral datafprintf('Read in hyperspectral image\n');inputImage = SimReadHyperspectralData(inputImage);% Convert units to photonsfprintf('Convert to photons\n');inputImage = SimHyperPowerToPhotons(inputImage);% Create photon image.  This takes sensor spectral senstivities,% lens transmissivity, aperture size, and mosaic into account.fprintf('Create photon image\n');outputImage = PDCCreatePhotonImage(inputImage,camera);% Do automatic exposure control and adjust image.fprintf('Exposure control\n');outputImage = PDCExposureImage(inputImage,camera);% Add noise.  Eventually deal with camera resolution.fprintf('Create digital image\n');[digitalImage] = createDigitalImage(photonImage,...   outputCamera.pdc.filterType,colorFilter,...   outputCamera.pdc.cmosChip,integrationTime,spatialResolution,'No');% Fill in toolbox image structureoutputImage = inputImage;outputImage.cameraFile = outputCamera;outputImage.imageType = 'sensor';outputImage.images = digitalImage;outputImage.mosaiced = 0;% Set number of bitsoutputImage.cameraFile.bits = outputCamera.pdc.cmosChip.nBits;% Set spectral sensitivitesoutputImage.cameraFile.wavelengthSampling.start = 380;outputImage.cameraFile.wavelengthSampling.step = 5;outputImage.cameraFile.wavelengthSampling.numberSamples = 81;outputImage.cameraFile.spectralSensitivity = SplineCMF(...	[400 10 31],...	outputCamera.pdc.filterType.data.spectra_10nm',...	[380 5 81]);outputImage.cameraFile.numberSensors = size(outputImage.cameraFile.spectralSensitivity,1);% Set mosaic patternoutputImage.cameraFile.spatialLayout.mosaic = zeros(1,1,3);outputImage.cameraFile.spatialLayout.mosaic(:,:,1) = 1;outputImage.cameraFile.spatialLayout.mosaic(:,:,2) = 2;outputImage.cameraFile.spatialLayout.mosaic(:,:,3) = 3;outputImage.cameraFile.spatialLayout.dims = [1 1 3];