function T = SimAdjustSensors(image,camera)% T = SimAdjustSensors(image,camera)%% Adjust spectral sensitivities to handle possibility that% they were specified in quanta, and also current exposure% duration, f-stop, distance, etc.%% Image units 'Disk' and 'Power' are handled identically and% it is not clear to me why we have each.%% 12/29/98  dhb  Wrote it.% 2/23/99   dhb  Fixed bug found by Russell, wl -> wls(wl)% 5/4/99    dhb  Handle image unit too.% 5/12/99   dhb  Fix bug in image unit handling.% 6/26/02   dhb  Added comment about Disk/Power unit mystery.  % Get spectral sampling informationS = [camera.wavelengthSampling.start camera.wavelengthSampling.step camera.wavelengthSampling.numberSamples];T = camera.spectralSensitivity;wls = SToWls(S);nWls = S(3);% Modify T to handle units, f-stop, exposure duration, etc.switch (camera.unit)  case 'Quanta',	    switch(image.unit)			% If the camera spectral sensitivities are quantal efficiencies,			% then compute a factor that converts from Watts/sr-m2 in the world			% to quanta-m2 in the image plane, then take exposure duration and			% pixel area into account.  The result of this are sensitivities that			% relate Watts/sr-m2 in the world to photons absorbed.			case {'Disk','Power'},			  % Get camera information			  pixelHeight = camera.pixelHeight;			  pixelWidth = camera.pixelWidth;			  collectingArea = pixelHeight*pixelWidth;			  focalLength = camera.lens/1000;			  			  % Get image information			  distance = image.cameraDistance;			  fStop = image.fStop;			  exposureTime = image.exposureTime;			  			  % Adjust T so that it is correct for input in Watts/sr-m2.			  for wl = 1:nWls			    factor = SimWattsToQuantaFactor(wls(wl),focalLength,fStop,distance);			    T(:,wl) = T(:,wl)*factor*exposureTime*collectingArea;			  end 					  % If the image is in quantal units and the sensors are too,			  % then we do nothing, on the assumption that this is all			  % being handled elsewhere.  This is really a kluge introduced			  % as part of integrating the PDC code into the toolbox.  Once			  % we've got things more under control I think we can probably			  % re-write this all more simply.			case 'Quanta',    end    % Camera sensitivities in power units.   case 'Watts'    switch(image.unit)			% If the camera spectral sensitivities are response to spectral			% radiance, we just adjust for exposure time and f-stop.			case {'Disk','Power'}				  exposureFactor = image.exposureTime/camera.calExposureTime;			  fStopFactor = (camera.calFStop/image.fStop)^2;			  T = T*exposureFactor*fStopFactor;					  % Barf on this case.			case 'Quanta',			  error('SimAdjustSensors: cannot handle image in Quanta and sensitivity in Watts');		      end				      % One might want a case to handle the human eye, where		      % we actually compute pupil size and effective integration		      % time based on the scene radiance.  case 'None',       otherwise,end