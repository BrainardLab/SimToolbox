function [outputImage] = SimWeightRawImages(hyperImage,camera)% [outputImage] = SimWeightRawImages(hyperImage,camera)%% Reads and weights the hyper spectral image to simulate% camera sensor planes.%% Although it is a bit of a kluge, the input image has fields% that provide the%   cameraDistance in meters (not used in this function)%   exposureTime in seconds%   fStop (no unit)% for the image to be simulated.  The weighting takes the exposure% duration and fStop into account.  The camera structure should% contain the fStop and duration with respect to which the sensitivities% are defined.%% Creates the ideal simulated image for the camera, at the% same spatial resolution as the hyperspectral images.%% 10/30/98  dhb  Added comments.% 11/21/98  pxl  Integrated the calculation of the weights%                Added CMOS (Quanta unit) check for the weights.% 12/7/98   dhb  Cosmetic changes, debugging.% 12/8/98   dhb  Comment out debugging stuff% 12/17/98  dhb  Removed double() from around SimReadRawImage.%								 (Added it to SimReadRawImage.)% 12/29/98  dhb  Handle quantal weights one level down, in SimComputeSensorWeights.%           dhb  Change inputImage to hyperImage.%           dhb  Change originalCameraDistance to hyperCameraDistance.%           dhb  Removed redundant assignments.% 1/10/99   dhb  DISPLAY option.% 1/13/99   dhb  Remove waitbar.% 5/4/99    dhb  Modified to work when image is already in memory as well as when it is on disk.% 01/26/00  pxl  Add support for intel/motorola files.% 11/25/00  dpl  Added support for arbitrary wave sampling.% Copyright (c) 1999 David Brainard and Philippe Longere.   All rights reserved.% Show result for debugging?DISPLAY = 0;% Compute weights for sensor. % Take into account the hyperimage weights, camera properties,% and image acquistion parameters. [weights,T] = SimComputeSensorWeights(hyperImage,camera);% Do the weighting, need to change into% raw image directory.  This process creates% the non-mosaiced output for each sensor% class, at the full resolution of the underlying% hyperspectral images.prevDir = pwd;if (~isempty(hyperImage.rawImageDir))    eval(['cd(''' hyperImage.rawImageDir ''');']);end% Initialize image structure.outputImage = hyperImage;% Create space for output image outputImage.images = zeros(hyperImage.height,hyperImage.width,camera.numberSensors);% If origin or data type is unknown, assume "old" data ie Motorola/int16if (~isfield(hyperImage,'originalPlatform')) hyperImage.originalPlatform=0;endif (~isfield(hyperImage,'type')) hyperImage.type='int16';end% Now do the weighting.if (DISPLAY)  fprintf('SimWeightRawImages: weighting hyperspectral images ...');endswitch (hyperImage.unit) case 'Disk',  for l = 0 : hyperImage.wavelengthSampling.numberSamples-1    % Read one plane    fname = [hyperImage.imageRoot num2str(hyperImage.wavelengthSampling.start+l*hyperImage.wavelengthSampling.step)];    if (~isfield(hyperImage,'fileType')|(~isequal(hyperImage.fileType,'mat')))      x = SimReadRawImage(fname,hyperImage.height,hyperImage.width,hyperImage.type,hyperImage.originalPlatform);    else  % implicitly data are in mat files      x = SimLoadInVariable([fname '.mat']);    end         % Build up the output planes    for n = 1:camera.numberSensors      outputImage.images(:,:,n) = outputImage.images(:,:,n) + x*weights(l+1,n);    end        % Clear out read image to save memory.    clear x;  end  eval(['cd(''' prevDir ''');']); case 'Power', case 'Quanta',  for l = 0 : hyperImage.wavelengthSampling.numberSamples-1    for n = 1:camera.numberSensors      outputImage.images(:,:,n) = outputImage.images(:,:,n) + hyperImage.images(:,:,l+1)*weights(l+1,n);    end  endendif (DISPLAY)  figure; clf;  subplot(3,1,1);  imshow(2*outputImage.images(:,:,1)/max(max(outputImage.images(:,:,1))));  drawnow;  subplot(3,1,2);  imshow(2*outputImage.images(:,:,2)/max(max(outputImage.images(:,:,2))));  drawnow;  subplot(3,1,3);  imshow(2*outputImage.images(:,:,3)/max(max(outputImage.images(:,:,3))));  drawnow;end