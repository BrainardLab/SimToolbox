function [renderImagePlanes] = SimBasicToneMap(inputImagePlanes,maxLum,clipLevelFactor)% [renderImagePlanes] = SimBasicToneMap(inputImagePlanes,maxLum,[clipLevel])%% Apply simple linear tone mapping to an input XYZ image.  A gain is applied so% that the what was clipLevel in the Y channel is now maxLum.  If% not passed, clipLevel is set to 5 times the mean Y image value.  Output% is also clipped to 0 for input less than 0.%% 5/18/04   dhb     Wrote it.% 6/28/04   dhb, bx Fix the algorithm not to clip separate planes%                       separately.if (nargin < 3 | isempty(clipLevelFactor))    clipLevelFactor = 5;endxPlane = inputImagePlanes(:,:,1);yPlane = inputImagePlanes(:,:,2);zPlane = inputImagePlanes(:,:,3);clipLevel = clipLevelFactor*mean(yPlane(:));% Find the scaling factor and applyfactor = maxLum/clipLevel;renderXPlane = factor*xPlane;renderYPlane = factor*yPlane;renderZPlane = factor*zPlane;% Now deal with pixels that are too bigindex = find(renderYPlane > maxLum);if (~isempty(index))    factors = maxLum ./ renderYPlane(index);    renderXPlane(index) = factors.*renderXPlane(index);    renderYPlane(index) = factors.*renderYPlane(index);    renderZPlane(index) = factors.*renderZPlane(index);end%Stuff answer into a single 3 plane imagerenderImagePlanes = zeros(size(inputImagePlanes));renderImagePlanes(:,:,1) = renderXPlane;renderImagePlanes(:,:,2) = renderYPlane;renderImagePlanes(:,:,3) = renderZPlane;% Deal with negative valuesindex = find(renderImagePlanes < 0);if (~isempty(index))    renderImagePlanes(index) = 0;end