% TestReadWrite%% This script tests that the read and write routines work and% are compatible with each other.%% 2/22/99  dhb  Wrote it.% 3/2/99   dhb  Pretty much complete.% 2/10/07  dhb  Update for PTB3 calibration.% Copyright (c) 1999 David Brainard and Philippe Longere.   All rights reserved.% Clear outclearclose all% Define some names.  Need to be careful to define% a reasonable camera for each image, otherwise% the resampling can produce strange looking % results.theImageName = 'BFGG_128';theIllumName = 'BFGG';theCameraName = 'kodakdcs200_50mm';theMonitorName = 'SimToolboxTest';% Set some simulation parameterscameraDistance = 3;exposureDuration = 0.5;fStop = 5.6;% Define paths to find data.  If you create a new% folder with a unique name and put it on MATLAB's% path, then you can replace SimDefineImagePath% below with SimDefineImagePath(yourFolderName)% and things should work tranparently.[imagesRootDir,dirSep] = SimDefineImagePath;inputImageFile = [imagesRootDir theImageName dirSep theImageName '.Simg'];theCameraFile = [theCameraName '.Scam'];theMonitorFile = [theMonitorName '.Smon'];outputDir = 'TestReadWriteFiles';outputImageFile = [pwd dirSep outputDir dirSep 'foo.Simg'];outputCameraFile = [pwd dirSep outputDir dirSep 'foo.Scam'];outputMonitorFile = [pwd dirSep outputDir dirSep 'foo.Smon'];% Make and clean output directory.if (~exist('outputDir','dir'))    eval('nil = mkdir(outputDir);','');endcd(outputDir);delete('*');cd ..% Simulate an image so we have something to read and write laterfprintf('Simulating an image for later read/write tests\n');simulatedImage = ...	SimSimulateCamera(inputImageFile,theCameraFile,cameraDistance,exposureDuration,fStop);fprintf('\n');if (strcmp(simulatedImage.cameraFile,'struct'))	error('Test script should be given an image with a camera file name');end% Render the image for monitor.fprintf('Rendering image for monitor\n');tempImage = SimQuickInterp(simulatedImage);renderedImage = SimRenderOnMonitor(tempImage,theMonitorFile);fprintf('\n');% Read monitor and camera filesfprintf('Reading camera and monitor files\n');simulatedCamera = SimReadCamera(theCameraFile);simulatedMonitor = SimReadMonitor(theMonitorFile);% Read in a hyperspectral image, write it, and check that it is equal.fprintf('Reading hyperspectral image: %s\n',inputImageFile);hyperspectralImage = SimReadImage(inputImageFile);fprintf('Writing hyperspectral image: %s\n',outputImageFile);fprintf('Reading hyperspectral image: %s\n',outputImageFile);SimWriteImage(outputImageFile,hyperspectralImage);checkImage = SimReadImage(outputImageFile);if (~SimEqualImage(hyperspectralImage,checkImage))	fprintf('Hyperspectral write/read check FAILS.\n\n');else	fprintf('Hyperspectral write/read check passes.\n\n');end% Write out simulated image as TIFFfprintf('Writing simulated image as a TIFF file\n');simulatedImage.imageFormat = 'tiff';SimWriteImage(outputImageFile,simulatedImage);fprintf('Reading simulated image (TIFF)\n');checkImage = SimReadImage(outputImageFile);if (~SimEqualImage(simulatedImage,checkImage))	fprintf('TIFF image write/read check FAILS.\n\n');else	fprintf('TIFF image write/read check passes.\n\n');end% Write out simulated image as raw int16fprintf('Writing simulated image as int16 raw files\n');simulatedImage.imageFormat = 'int16';SimWriteImage(outputImageFile,simulatedImage);fprintf('Reading simulated image (int16)\n');checkImage = SimReadImage(outputImageFile);if (~SimEqualImage(simulatedImage,checkImage))	fprintf('Int16 image write/read check FAILS.\n\n');else	fprintf('Int16 image write/read check passes.\n\n');end% Write out simulated image as raw int32fprintf('Writing simulated image as int32 raw files\n');simulatedImage.imageFormat = 'int32';SimWriteImage(outputImageFile,simulatedImage);fprintf('Reading simulated image (int32)\n');checkImage = SimReadImage(outputImageFile);if (~SimEqualImage(simulatedImage,checkImage))	fprintf('Int32 image write/read check FAILS.\n\n');else	fprintf('Int32 image write/read check passes.\n\n');end% Write out simulated image as mat filefprintf('Writing simulated image as mat file\n');simulatedImage.imageFormat = 'mat';SimWriteImage(outputImageFile,simulatedImage);fprintf('Reading simulated image (mat)\n');checkImage = SimReadImage(outputImageFile);if (~SimEqualImage(simulatedImage,checkImage))	fprintf('Mat image write/read check FAILS.\n\n');else	fprintf('Mat image write/read check passes.\n\n');end% Write out with camera structfprintf('Writing simulated image with camera struct\n');simulatedImage.cameraFile = simulatedCamera;simulatedImage.imageFormat = 'tiff';SimWriteImage(outputImageFile,simulatedImage);fprintf('Reading simulated image with camera struct\n');checkImage = SimReadImage(outputImageFile);if (~SimEqualImage(simulatedImage,checkImage))	fprintf('Image w/ camera struct write/read check FAILS.\n\n');else	fprintf('Image w/ camera struct write/read check passes.\n\n');end% Write out monitor image as TIFFfprintf('Writing monitor image as a TIFF file\n');renderedImage.imageFormat = 'tiff';SimWriteImage(outputImageFile,renderedImage);fprintf('Reading monitor image (TIFF)\n');checkImage = SimReadImage(outputImageFile);if (~SimEqualImage(renderedImage,checkImage))	fprintf('TIFF image write/read check FAILS.\n\n');else	fprintf('TIFF image write/read check passes.\n\n');end% Write out with monitor structfprintf('Writing monitor image with monitor struct\n');simulatedImage.monitorFile = simulatedMonitor;renderedImage.imageFormat = 'tiff';SimWriteImage(outputImageFile,renderedImage);fprintf('Reading monitor image (TIFF)\n');checkImage = SimReadImage(outputImageFile);if (~SimEqualImage(renderedImage,checkImage))	fprintf('Image w/ monitor struct write/read check FAILS.\n\n');else	fprintf('Image w/ monitor struct write/read check passes.\n\n');end% Write out with camera/monitor structsfprintf('Writing monitor image with camera/monitor structs\n');simulatedImage.cameraFile = simulatedCamera;simulatedImage.monitorFile = simulatedMonitor;renderedImage.imageFormat = 'tiff';SimWriteImage(outputImageFile,renderedImage);fprintf('Reading monitor image (TIFF)\n');checkImage = SimReadImage(outputImageFile);if (~SimEqualImage(renderedImage,checkImage))	fprintf('Image w/ camera/monitor structs write/read check FAILS.\n\n');else	fprintf('Image w/ camera/monitor structs write/read check passes.\n\n');end% Read and write of a camera file.  Put in non-square mosaic% to check that the tricky code there works correctly.fprintf('Writing camera file\n');simulatedCamera.spatialLayout.mosaic = ...	[ ...	1 3 2 3 ; ...	2 1 3 1 ; ...	3 2 1 2 ; ...	];[patternRows,patternCols] = size(simulatedCamera.spatialLayout.mosaic);simulatedCamera.spatialLayout.dims = [patternRows patternCols 1]';SimWriteCamera(outputCameraFile,simulatedCamera);fprintf('Reading camera file\n');checkCamera = SimReadCamera(outputCameraFile);if (~SimEqualCamera(simulatedCamera,checkCamera))	fprintf('Camera write/read check FAILS.\n\n');else	fprintf('Camera write/read check passes.\n\n');end% Read and write of a monitor file.fprintf('Writing monitor file\n');SimWriteMonitor(outputMonitorFile,simulatedMonitor);fprintf('Reading monitor file\n');checkMonitor = SimReadMonitor(outputMonitorFile);if (~SimEqualMonitor(simulatedMonitor,checkMonitor))	fprintf('Monitor write/read check FAILS.\n\n');else	fprintf('Monitor write/read check passes.\n\n');end% Clean up scratch directorycd(outputDir);delete('*');cd ..rmdir(outputDir);