% TestProcessDCS200%% Reads a mosaiced image (raw) from DCS200, puts it into our format,% and processes it for display.  Compares the answer to what we% get when we simulate the image from hyperspectral data.%%% Something is wrong with the spatial scaling and intensity% scaling between hyperspectral and real data.  The colors% are also not correct.  This needs to be tracked down.%% 3/2/99  dhb  Wrote it.% 2/10/07 dhb  Minor updates so it runs.  The comments above about problems%              still apply.% Copyright (c) 1999 David Brainard and Philippe Longere.   All rights reserved.% Clear outclear allclose all% DISPLAY flagDISPLAY_IMAGES = 1;BALANCE_WITH_KNOWN = 1;RENDER_D65 = 0;% Define some names.theImageName = 'DCS200TestIR';theIllumName = 'cacaphony';theCameraName = 'kodakdcs200_50mmIR';theMonitorName = 'SimToolboxTest';hyperImageName = 'Cacaphony290';% Set some simulation parameters.  % We don't actually know what the% exposure time was for the DCS image,% so this is estimated by comparing the% maximum values in the image to what% we predict from the sensor responses% to the measured illuminant.cameraDistance = 3.32;exposureDuration = 0.1;fStop = 11;% Define paths to find data.  If you create a new% folder with a unique name and put it on MATLAB's% path, then you can replace SimDefineImagePath% below with SimDefineImagePath(yourFolderName)% and things should work tranparently.[imagesRootDir,dirSep] = SimDefineImagePath;inputImageFile = [imagesRootDir theImageName dirSep theImageName '.tif'];hyperImageFile = [imagesRootDir hyperImageName dirSep hyperImageName '.Simg'];theCameraFile = [theCameraName '.Scam'];theMonitorFile = [theMonitorName '.Smon'];% Snag the DCS200 image and show itdcsImage = SimTIFFToImage(inputImageFile,theCameraFile,cameraDistance,exposureDuration,fStop);if (DISPLAY_IMAGES)	figure(1);	subplot(2,2,1);	imshow(Trunc(SimScale(dcsImage.images(:,:,1:3))));	title('Input Image');	drawnow;end% Bilinear demosaicingdemosaicImage = SimFastLinearInterp(dcsImage);if (DISPLAY_IMAGES)	figure(1);	subplot(2,2,2);	imshow(Trunc(SimScale(demosaicImage.images(:,:,1:3))));	title('Demosaiced');	drawnow;end% Color balancing, based on knowing the illuminant.eval(['load spd_' theIllumName]);eval(['theIllumSpd = spd_' theIllumName ';']);eval(['theIllumS = S_' theIllumName ';']);estimatedImage = demosaicImage;estimatedImage.estimatedIlluminant.spd = theIllumSpd;estimatedImage.estimatedIlluminant.S = theIllumS;% Load color matching functions to get thing into rangeload T_xyz1931;T_xyz1931 = 683*T_xyz1931;illumXYZ = T_xyz1931*estimatedImage.estimatedIlluminant.spd;renderFactor = 35/illumXYZ(2);% Balance the image.% Render under D65.  Illuminant spd_D65Render is scaled to monitor% output range.if (RENDER_D65)	load spd_D65Render;	renderedImage = SimBalancing(estimatedImage,...	estimatedImage.estimatedIlluminant.S,estimatedImage.estimatedIlluminant.spd,...	S_D65Render,spd_D65Render);% Render under actual illuminant, scaled to work in monitor range.else	renderedImage = SimBalancing(estimatedImage,...	estimatedImage.estimatedIlluminant.S,estimatedImage.estimatedIlluminant.spd,...	estimatedImage.estimatedIlluminant.S,estimatedImage.estimatedIlluminant.spd*renderFactor);endif (DISPLAY_IMAGES)	figure(1);	subplot(2,2,3);	imshow(Trunc(SimScale(renderedImage.images)));	title('Balanced');	drawnow;end% Render balanced image on monitor.  Algorithm is to produce an% image on the monitor that is metameric to the passed camera% image.monitorImage = SimRenderOnMonitor(renderedImage,theMonitorFile);if (DISPLAY_IMAGES)	figure(1);	subplot(2,2,4);	imshow(Trunc(SimScale(monitorImage.images)));	title('Monitor');	drawnow;end% Simulate the image from hyperspectral datasimulatedImage = SimSimulateCamera(hyperImageFile,theCameraFile,cameraDistance,exposureDuration,fStop);if (DISPLAY_IMAGES)	figure(2);	subplot(2,2,1);	imshow(Trunc(SimScale(simulatedImage.images(:,:,1:3))));	title('Simulated Image');	drawnow;end% Bilinear demosaicingsimDemosaicImage = SimFastLinearInterp(simulatedImage);if (DISPLAY_IMAGES)	figure(2);	subplot(2,2,2);	imshow(Trunc(SimScale(simDemosaicImage.images(:,:,1:3))));	title('Demosaiced');	drawnow;end% Color balancing, based on knowing the illuminant.simEstimatedImage = simDemosaicImage;simEstimatedImage.estimatedIlluminant.spd = theIllumSpd;simEstimatedImage.estimatedIlluminant.S = theIllumS;% Balance the image.if (RENDER_D65)	load spd_D65Render;	simRenderedImage = SimBalancing(simEstimatedImage,...	simEstimatedImage.estimatedIlluminant.S,simEstimatedImage.estimatedIlluminant.spd,...	S_D65Render,spd_D65Render);else	simRenderFactor = renderFactor;	simRenderedImage = SimBalancing(simEstimatedImage,...	simEstimatedImage.estimatedIlluminant.S,simEstimatedImage.estimatedIlluminant.spd,...	simEstimatedImage.estimatedIlluminant.S,simEstimatedImage.estimatedIlluminant.spd*simRenderFactor);endif (DISPLAY_IMAGES)	figure(2);	subplot(2,2,3);	imshow(Trunc(SimScale(simRenderedImage.images)));	title('Balanced');	drawnow;end% Render balanced image on monitor.  Algorithm is to produce an% image on the monitor that is metameric to the passed camera% image.simMonitorImage = SimRenderOnMonitor(simRenderedImage,theMonitorFile);if (DISPLAY_IMAGES)	figure(2);	subplot(2,2,4);	imshow(Trunc(SimScale(simMonitorImage.images)));	title('Monitor');	drawnow;end