function [rawSurfaceImage] = SimFindSurfaceRefl(inputImage,S_illumSpd,spd_illum,S_surfaceB,B_surface)% [rawSurfaceImage] = SimFindSurfaceRefl(inputImage,S_illumSpd,spd_illum,S_surfaceB,B_surface)%% Recover surface reflectance spectra within passed linear model% and under the assumption of the passed illuminant.  This is% very standard colorimetric stuff.%% Spectra are returned as linear model weights in a raw image format.% The image is height by width by nBases matrix.%% One might think a little harder about whether surfaces and illuminants% should have defined image types within the simulator.  For now, not.%% 4/16/99  Wrote it.% Copyright (c) 1998, 1999 David Brainard & Philippe Longere. All rights reserved.% Read the image and camera descriptions.if (isstruct(inputImage))  renderImage = inputImage;else  renderImage = SimReadImage(inputImage); endif (~isstruct(renderImage.cameraFile))	camera = SimReadCamera(renderImage.cameraFile);else	camera = renderImage.cameraFile;end% Check that its not mosaicedif (inputImage.mosaiced == 1)	error('Cannot handle mosaiced image');end% Get effective sensors, ready for use with Watts/sr-m2.T_in = SimAdjustSensors(inputImage,camera);% Spline stuff down to common wavelenth samplingS_use = [camera.wavelengthSampling.start camera.wavelengthSampling.step camera.wavelengthSampling.numberSamples];B_surface = SplineSrf(S_surfaceB,B_surface,S_use);spd_illum = SplineSpd(S_illumSpd,spd_illum,S_use);% Compute correction matrix.M_sensorToSur = inv(T_in*diag(spd_illum)*B_surface);% Actual balancing from sensor to render device/illuminant space.% Need to reshape data to apply correction.rawSurfaceImage = SimApplyColorTransform(M_sensorToSur,renderImage.images);