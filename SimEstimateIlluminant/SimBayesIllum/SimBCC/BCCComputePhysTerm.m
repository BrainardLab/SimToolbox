function [T_phys,penalty,T_pos,T_greater] = BCCComputePhysTerm(est,pTol,N,B)% [T_phys,penalty,T_pos,T_greater] = BCCComputePhysTerm(est,pTol,N,B)%% Checks for surface physical realizability in the wavelength% domain, where this is defined as all reflectances between% zero and one.%% Returns 1 if OK (within pTol), 0 if not.% % The implementation depends on the fact that reshape()% takes the columns first.%% 1/15/94		dhb		Wrote it.% 9/4/94		dhb		Fixed it to work for N > 1.% 12/4/94		dhb		Return shouldBePos as well.% 12/5/94		dhb		Change shouldBePos to a penalty measure.% 12/18/94	    dhb		Change penalty variable to a vector.%									Entries are less than 0 for OK.% 12/20/94	    dhb		Change meaning of pTol.  It is ignored.% 1/5/95		dhb		Put meaning back into pTol.% 11/08/98      pxl		Changed names of functions.% 9/5/02        dhb     Make check for negative relative.%               dhb     Return separate T_pos and T_greater.%               dhb     Eliminate MatMax, MatMin calls.% Copyright (c) 1999 David Brainard and Philippe Longere.   All rights reserved.[N_lambda,M] = size(B);expand = B*reshape(est,M,N);maxrefl = max(expand(:));normexpand = expand/maxrefl;if (min(normexpand(:)) < -pTol)  T_pos = 0;else	T_pos = 1;endif (max(expand(:)) > 1+pTol)	T_greater = 0;else	T_greater = 1;endT_phys = (T_pos & T_greater);penalty1 = -normexpand-pTol;penalty2 = expand-1-pTol;penalty = [penalty1 , penalty2];% Diagnosis% fprintf('Min input is %g, max is %g\n',min(expand(:)),max(expand(:)));% fprintf('Normalized min is %g, pTol is %g\n',min(normexpand(:)),pTol);% fprintf('T_phys = %g, T_pos = %g, T_greater = %g\n',T_phys,T_pos,T_greater);