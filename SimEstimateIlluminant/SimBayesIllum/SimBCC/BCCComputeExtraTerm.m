function T_extra = BCCComputeExtraTerm(A_est,y,K_nk,K_otheri,u_otheri,N_other)% T_extra = BCCComputeExtraTerm(A_est,y,K_nk,K_otheri,u_otheri,N_other)%% Compute the extra term (needs a name, or include it with feasibility term).% This arises from constant introduced when completing square.%% Ought to take into account the priors of the beta variables.%% I tried to keep the variable names consistent with the functions% which compute the other terms.  Variables u_i, K_i might also be% called u_est, K_est, for consistency with A_est, but kept with this% notation for consistency with the other functions.%% 9/7/93		wtf		Wrote it.% 9/9/93		wtf		Corrected the sign in the exponent.% 7/28/02       dhb     Renamed.% variable:             function where the name came from:%  A_est                ComputeFeasTerm%  y                    ComputeFeasTerm%  K_nk                 ComputeFeasTerm%  K_otheri             ComputeGenericTerm%  u_otheri             ... not in other functions ...%  N_other              ComputeGenericTerm% Expand noise out for the whole enchilada (code from ComputeFeasTerm.m)y = y(:);[N_y,null] = size(y);[N_r,null] = size(K_nk);N_expand = N_y/N_r;K_n = BCCExpandCov(K_nk,N_expand);% Expand other terms (from ComputeGenericTerm.m)K_other = BCCExpandCov(K_otheri,N_other);% by analogy with the code from ComputeFeasTerm.m:u_other = BCCExpandMean(u_otheri,N_other);% from DB FAX, p. 5, and p. 664,665 wtf red bookk1inv = A_est'*inv(K_n)*A_est;k2inv = inv(K_other);u1 = A_est\y;u2 = u_other;dev1 = k1inv*u1 + k2inv*u2;T_extra = exp(0.5*( dev1'*inv(k1inv + k2inv)*dev1 - u1'*k1inv*u1));