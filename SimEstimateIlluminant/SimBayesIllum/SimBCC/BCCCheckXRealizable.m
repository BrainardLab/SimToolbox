function [T_realizable,T_posX] = BCCCheckXRealizable(x,y,pTol,colorPriors,sensors)% [T_realizable,T_posX] = BCCCheckXRealizable(x,y,pTol,colorPriors,sensors) = BCCCheckXRealizable(x,y,pTol,colorPriors,sensors)%% Check whether an x vector and its implied surfaces% are consistitent with physical realizability in% both lights and surfaces, for any scaling of the illuminant x.%% 9/2/02  dhb  Pulled out of BCCRandXPOS.% 9/6/02  dhb  Get rid of wavelength restriction on expansion.% 9/6/02  dhb  Change name, and make it scaling invariant.% Find the beta implied by x.N_x = size(x,2);N_beta = size(y,2);A_x = BCCComputeA_x(x,N_x,colorPriors.light.B,N_beta,colorPriors.sur.B,sensors.R); beta = (A_x\y(:));% Check itT_posX = BCCComputePosTerm(x,pTol,N_x,colorPriors.light.B);if (T_posX)	[nil,nil,T_posBeta] = BCCComputePhysTerm(beta,pTol,N_beta,colorPriors.sur.B);	T_realizable = (T_posX & T_posBeta);else	T_realizable = T_posX;end% Diagnosis% fprintf('Return values are light %g, overall %g\n',T_posX,T_realizable);