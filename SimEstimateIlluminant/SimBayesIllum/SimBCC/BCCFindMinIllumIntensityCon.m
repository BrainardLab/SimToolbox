function [g,geq] = BCCFindMinIllumIntensityCon(k,xNorm,y,pTol,colorPriors,sensors,betaHat0)% g = BCCFindMinIllumIntensityCon(k,xNorm,y,pTol,colorPriors,sensors,betaHat0)%% Constraint function for BCCFindMinIllumIntensity%% 7/25/02  dhb  Wrote it.% 9/8/02   dhb  Pass betaHat0, speed computation of betaHat.% 8/18/03  dhb  Separate out penalty and constraint functions.% Check callingif (nargout > 2)    error('Does not return constraint gradient');end% Set parametersN_x = 1;[nil,N_beta] = size(y);% Now compute physical realizability contstraint.% A_xHat = BCCComputeA_x(k*xNorm,N_x,colorPriors.light.B,N_beta,colorPriors.sur.B,sensors.R);				% betaHat = (A_xHat\y(:));if (k <= 0)    k = 1e-34;endbetaHat = betaHat0/k;[T_phys,penalty] = BCCComputePhysTerm(betaHat,pTol,N_beta,colorPriors.sur.B);g = max(penalty);index = find( g > 2000 | isnan(g) | isinf(g) );g(index) = 2000*ones(size(index));geq = [];