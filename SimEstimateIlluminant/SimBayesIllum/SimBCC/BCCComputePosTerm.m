function [T_positive,penalty] = BCCComputePosTerm(est,pTol,N,B)% [T_positive,penalty] = BCCComputePosTerm(est,pTol,N,B)%% Checks for positivity in the wavelength domain.  Returns% 1 if all positive (within pTol), 0 if not.% % The implementation depends on the fact that reshape()% takes the columns first.%% 1/17/94		dhb		pTol convention changed.% 9/4/94		dhb		Fixed it to work for N > 1.% 12/4/94		dhb		Return shouldBePos as well.% 12/5/94		dhb		Change shouldBePos to a penalty measure.% 12/18/94	    dhb		Change penalty variable to a vector.%									Entries are less than 0 for OK.% 12/20/94	    dhb		Change meaning of pTol.  It is ignored.% 1/1/95		dhb		Put meaning back into pTol.% 4/30/96		dhb		Compute constraint violation relative to max.% 11/08/98      pxl		Changed names of functions.% 9/6/02        dhb     Eliminate MatMax, MatMin calls.% Copyright (c) 1999 David Brainard and Philippe Longere.   All rights reserved.[N_lambda,M] = size(B);expand = B*reshape(est,M,N);normexpand = expand/max(expand(:));if (min(normexpand(:)) < -pTol)  T_positive = 0;else  T_positive = 1;end% Compute penalty vector for constrained search.penalty = -normexpand-pTol;% Diagnosis% fprintf('Min input is %g, max is %g\n',min(expand(:)),max(expand(:)));% fprintf('Normalized min is %g, pTol is %g\n',min(normexpand(:)),pTol);% fprintf('T_pos = %g\n',T_positive);