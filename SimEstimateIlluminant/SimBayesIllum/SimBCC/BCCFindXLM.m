function x = BCCFindXLM(xStart0,xStart1,y,colorPriors,sensors,loss)% x = BCCFindXLM(xStart0,[xStart1],y,colorPriors,sensors,loss)%% Find the point that minimizes the local mass loss.%% 5/14/96       dhb  	Wrote it based on new FindXPOS.% 11/08/98      pxl		Changed names of functions, cleaned up.% 12/31/98      dhb   Use structure for inputs.%               dhb   Mandatory passing of x0B, no longer computed here.% 7/27/02       dhb   Add default for POLARSEARCH.% 7/27/02       dhb   Remove pTol arg, fold into loss.% 7/28/02       dhb   Second start arg optional, renamed some variables.%               dhb   Simplify search logic.% 9/2/02        dhb   Update call to BCCRandXPOS.%               dhb   Added plots to show what is happening in search.% 8/15/03       dhb   Convert xy to uv.% 2/10/07       dhb   Convert for Optimization Toolbox 2.0.fprintf('BCCFindXLM:\n');% Polar search?global POLARSEARCHif (isempty(POLARSEARCH))	POLARSEARCH = 1;end% Find starting points%[theXs,theuvYs] = BCCFindStartingPoints(xStart0,xStart1,y,colorPriors,sensors,loss);theXs = [xStart0 xStart1];nXs = size(theXs,2);% Search options.  Set options(1) to 1 for printout.options = optimset;options = optimset(options,'Diagnostics','off','Display','off');options = optimset(options,'LargeScale','off');x0 = BCCLinearToPolarCC(theXs(:,1));[f0,g0] = BCCFindXLMFun(x0,y,colorPriors,sensors,loss);fprintf('\tInitial loss 1, f = %g, g = %g\n',f0,MatMax(g0));	x1 = fminunc('BCCFindXLMFun',x0,options,y,colorPriors,sensors,loss);[f1,g1] = BCCFindXLMFun(x1,y,colorPriors,sensors,loss);fprintf('\tAfter search, f = %g, g = %g\n\n',f1,MatMax(g1));	x = BCCPolarToLinearCC(x1);f = f1;g = MatMax(g1);% Now loop through and see if we can do better from somewhere else.	for i = 2:nXs	x0 = BCCLinearToPolarCC(theXs(:,i));	[f0,g0] = BCCFindXLMFun(x0,y,colorPriors,sensors,loss);	fprintf('\tInitial loss %d, f = %g, g = %g\n',i,f0,MatMax(g0));	    x1 = fminunc('BCCFindXLMFun',x0,options,y,colorPriors,sensors,loss);	[f1,g1] = BCCFindXLMFun(x1,y,colorPriors,sensors,loss);	fprintf('\tAfter search, f = %g, g = %g\n',f1,MatMax(g1));		if (f1 < f & MatMax(g1) < loss.pTol)		x = BCCPolarToLinearCC(x1);		f = f1;		g = MatMax(g1);		end	fprintf('\tBest loss so far, f = %g, g = %g\n\n',f,g);end