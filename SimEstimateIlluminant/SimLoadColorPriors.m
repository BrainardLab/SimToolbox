function colorPriors = SimLoadColorPriors(filename)% colorPriors = SimLoadColorPriors(filename)%% Load the illuminant basis functions and set% the priors.  This script assumes that MakePriors% has been run to generate the input MAT-file.%% 01/15/94	dhb	Turned this into a function% 11/08/98  pxl Renamed, and removed unuseful variables.% 12/30/98  dhb Took the plunge.  Renamed, return a structure.% 4/20/99   dhb Return S from file if it is there.% 6/26/02   dhb Added type field.% 7/27/02   dhb Handle old files without prior type variable.% 7/28/02   dhb Remove drawLumFactor.% 8/31/02   dhb Handle MToXYZ_light better.%			dhb Deal with spaces in filename.% 5/7/04    dhb Handle case where priors structure is already there.% 2/10/07   dhb Generate MToXYZ if it's not there for truncNormalWeights case.%               This addition is not thorougly tested.% Copyright (c) 1999-2004 David Brainard and Philippe Longere.   All rights reserved.% Load the results of script MakePriorscommand = ['load(''' filename ''');'];eval(command);% If file contains structure all set up, just return it.if (exist('colorPriors') == 1 & isstruct(colorPriors))    return;end% Define S.  Use default if it isn't stored.if (exist('S','var') == 0)    colorPriors.S = [380 5 81];else    colorPriors.S = S;end% Set light priorsif (exist('lightPriorType') ~= 1)    lightPriorType = 'truncNormalWeights';endswitch (lightPriorType)    case 'truncNormalWeights',        colorPriors.light.B = B_light;        colorPriors.light.u = u_light;        colorPriors.light.K = K_light;        colorPriors.light.priorType = lightPriorType;        if (exist('MToXYZ_light') == 1)            colorPriors.light.MToXYZ = MToXYZ_light;        else            load T_xyzJuddVos            T_xyz = SplineCmf(S_xyzJuddVos,T_xyzJuddVos,colorPriors.S);            MXToXYZ = T_xyz*colorPriors.light.B(:,1:3);            colorPriors.light.MToXYZ = inv(MXToXYZ);            if (size(colorPriors.light.B,2) > 3)                extraRows = size(colorPriors.light.B,2) - 3;                colorPriors.light.MToXYZ = [colorPriors.light.MToXYZ ; zeros(extraRows,3) ];            end        end    case 'normalChrom',        colorPriors.light.B = B_light;        colorPriors.light.u = u_light;        colorPriors.light.K = K_light;        colorPriors.light.MToXYZ = MToXYZ_light;        colorPriors.light.priorType = lightPriorType;    otherwise,        error('Unsupported light prior type');end% Set surface priorsif (exist('surPriorType') ~= 1)    surPriorType = 'truncNormalWeights';endswitch (surPriorType)    case 'truncNormalWeights',        colorPriors.sur.B = B_surface;        colorPriors.sur.u = u_surface;        colorPriors.sur.K = K_surface;        colorPriors.sur.priorType = surPriorType;    otherwise,        error('Unsupported surface prior type');end